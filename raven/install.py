import click
import frappe
from frappe.desk.page.setup_wizard.setup_wizard import add_all_roles_to, make_records
import os


def after_install():
	try:
		print("Setting up Raven...")
		add_all_roles_to("Administrator")
		create_raven_user_for_administrator()
		create_general_channel()
		create_firebase_service_worker_file()

		click.secho("Thank you for installing Raven!", fg="green")

	except Exception as e:
		BUG_REPORT_URL = "https://github.com/The-Commit-Company/Raven/issues/new"
		click.secho(
			"Installation for Raven failed due to an error."
			" Please try re-installing the app or"
			f" report the issue on {BUG_REPORT_URL} if not resolved.",
			fg="bright_red",
		)
		raise e


def create_raven_user_for_administrator():

	if not frappe.db.exists("Raven User", {"user": "Administrator"}):
		frappe.get_doc(
			{
				"doctype": "Raven User",
				"user": "Administrator",
				"full_name": "Administrator",
				"type": "User",
			}
		).insert(ignore_permissions=True)


def create_general_channel():
	default_workspace = frappe.get_doc(
		{
			"doctype": "Raven Workspace",
			"workspace_name": "Raven",
			"type": "Public",
		}
	)
	default_workspace.insert(ignore_permissions=True)

	# Make all users a member of this workspace and set them as admins
	users = frappe.get_all("Raven User")
	for user in users:
		try:
			frappe.get_doc(
				{
					"doctype": "Raven Workspace Member",
					"workspace": default_workspace.name,
					"user": user.name,
					"is_admin": True,
				}
			).insert(ignore_permissions=True)
		except Exception as e:
			pass  # nosemgrep

	channel = [
		{
			"doctype": "Raven Channel",
			"name": "general",
			"type": "Open",
			"channel_name": "General",
			"workspace": default_workspace.name,
		}
	]

	make_records(channel)


def create_firebase_service_worker_file():
	"""
	Tạo firebase-messaging-sw.js file ở site root
	"""
	try:
		from frappe.utils import get_site_path
		
		# Path to service worker file at site root
		site_root = get_site_path()
		sw_file_path = os.path.join(site_root, "public", "firebase-messaging-sw.js")
		
		# Ensure public directory exists
		public_dir = os.path.join(site_root, "public")
		if not os.path.exists(public_dir):
			os.makedirs(public_dir, exist_ok=True)
		
		# Get service worker content
		service_worker_content = get_service_worker_content()
		
		# Write service worker file
		with open(sw_file_path, 'w', encoding='utf-8') as f:
			f.write(service_worker_content)
		
		frappe.logger().info(f"✅ Firebase service worker created at: {sw_file_path}")
		
	except Exception as e:
		frappe.logger().error(f"❌ Error creating Firebase service worker: {str(e)}")


def get_service_worker_content():
	"""
	Get Firebase service worker content từ app hoặc generate fallback
	"""
	try:
		# Try to load from app
		possible_paths = [
			os.path.join(frappe.get_app_path("raven"), "public", "firebase-messaging-sw.js"),
			os.path.join(frappe.get_app_path("raven"), "raven", "public", "firebase-messaging-sw.js"),
			os.path.join(frappe.get_app_path("raven"), "frontend", "public", "firebase-messaging-sw.js")
		]
		
		for path in possible_paths:
			if os.path.exists(path):
				with open(path, 'r', encoding='utf-8') as f:
					content = f.read()
				frappe.logger().info(f"✅ Service worker content loaded from: {path}")
				return content
		
		# Fallback content
		frappe.logger().warning("⚠️ Using fallback service worker content")
		return get_fallback_service_worker_content()
		
	except Exception as e:
		frappe.logger().error(f"❌ Error getting service worker content: {str(e)}")
		return get_fallback_service_worker_content()


def get_fallback_service_worker_content():
	"""
	Generate fallback service worker content
	"""
	return """// Firebase Messaging Service Worker - Generated by Raven App
// Import Firebase scripts
importScripts('https://www.gstatic.com/firebasejs/10.12.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/10.12.0/firebase-messaging-compat.js');

// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyBjvUyp3VClva2ZEJYlumonaYnwE9_WYC8",
  authDomain: "erpnextvn-d0ec7.firebaseapp.com",
  projectId: "erpnextvn-d0ec7",
  storageBucket: "erpnextvn-d0ec7.firebasestorage.app",
  messagingSenderId: "771489672323",
  appId: "1:771489672323:web:04698dae5fd6db76af7fb6",
  measurementId: "G-13L796L4FB"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);

// Get messaging instance
const messaging = firebase.messaging();

// Handle background messages
messaging.onBackgroundMessage(function(payload) {
  console.log('[firebase-messaging-sw.js] Received background message:', payload);

  const notificationTitle = payload.notification?.title || 'Raven Notification';
  const notificationOptions = {
    body: payload.notification?.body || 'Bạn có một tin nhắn mới',
    icon: '/assets/raven/raven-logo.png',
    badge: '/assets/raven/raven-logo.png',
    image: payload.notification?.image,
    data: payload.data,
    tag: payload.data?.channel_id || 'raven-notification',
    requireInteraction: true,
    actions: [
      {
        action: 'open',
        title: 'Mở',
        icon: '/assets/raven/raven-logo.png'
      },
      {
        action: 'close',
        title: 'Đóng'
      }
    ]
  };

  // Show notification
  self.registration.showNotification(notificationTitle, notificationOptions);
});

// Handle notification click
self.addEventListener('notificationclick', function(event) {
  console.log('[firebase-messaging-sw.js] Notification click received:', event);

  event.notification.close();

  if (event.action === 'close') {
    return;
  }

  const clickAction = event.notification.data?.click_action || 
                     event.notification.data?.message_url || 
                     '/raven';

  // Open or focus window
  event.waitUntil(
    clients.matchAll({
      type: 'window'
    }).then(function(clientList) {
      // Check if there's already a window open
      for (var i = 0; i < clientList.length; i++) {
        var client = clientList[i];
        if (client.url.includes('/raven') && 'focus' in client) {
          client.postMessage({
            type: 'NOTIFICATION_CLICKED',
            data: event.notification.data
          });
          return client.focus();
        }
      }
      
      // If no window is open, open a new one
      if (clients.openWindow) {
        return clients.openWindow(clickAction);
      }
    })
  );
});

// Handle notification close
self.addEventListener('notificationclose', function(event) {
  console.log('[firebase-messaging-sw.js] Notification closed:', event);
});

// Handle push event (backup)
self.addEventListener('push', function(event) {
  console.log('[firebase-messaging-sw.js] Push received:', event);
  
  if (event.data) {
    try {
      const payload = event.data.json();
      const notificationTitle = payload.notification?.title || 'Raven Notification';
      const notificationOptions = {
        body: payload.notification?.body || 'Bạn có một tin nhắn mới',
        icon: '/assets/raven/raven-logo.png',
        badge: '/assets/raven/raven-logo.png',
        data: payload.data
      };

      event.waitUntil(
        self.registration.showNotification(notificationTitle, notificationOptions)
      );
    } catch (error) {
      console.error('[firebase-messaging-sw.js] Error handling push:', error);
    }
  }
});

console.log('Firebase messaging service worker loaded successfully - Generated by Raven App');"""
