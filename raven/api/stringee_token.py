import frappe
import jwt
import time
from frappe import _

def get_call_session_safely(session_id):
	"""
	Safely get call session document with proper error handling
	"""
	try:
		return frappe.get_doc("Raven Call Session", {"session_id": session_id})
	except frappe.DoesNotExistError:
		frappe.throw(_("Session cu·ªôc g·ªçi kh√¥ng t·ªìn t·∫°i"))
	except Exception as e:
		frappe.log_error(f"L·ªói khi l·∫•y call session: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ truy c·∫≠p session cu·ªôc g·ªçi"))

@frappe.whitelist(methods=["GET"])
def get_stringee_token():
	"""
	T·∫°o token cho Stringee Call 2
	"""
	try:
		# L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
		user = frappe.session.user
		
		# L·∫•y c·∫•u h√¨nh Stringee t·ª´ site config
		api_key_sid = frappe.conf.get("stringee_api_key_sid")
		api_key_secret = frappe.conf.get("stringee_api_key_secret")
		
		if not api_key_sid or not api_key_secret:
			frappe.throw(_("Stringee API keys ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh"))
		
		# T·∫°o JWT token cho Stringee
		payload = {
			"jti": f"{user}_{int(time.time())}",  # JWT ID
			"iss": api_key_sid,  # Issuer (API Key SID)
			"exp": int(time.time()) + 3600,  # Expiration time (1 hour)
			"userId": user,  # User ID
			"rest_api": True,  # Enable REST API
		}
		
		# T·∫°o JWT token
		token = jwt.encode(payload, api_key_secret, algorithm="HS256")
		
		return {
			"token": token,
			"user_id": user
		}
		
	except Exception as e:
		frappe.log_error(f"L·ªói khi t·∫°o Stringee token: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ t·∫°o token cho cu·ªôc g·ªçi"))

@frappe.whitelist(methods=["POST"])
def create_call_session(caller_id, callee_id, call_type="video"):
	"""
	T·∫°o session cu·ªôc g·ªçi gi·ªØa 2 ng∆∞·ªùi d√πng
	"""
	try:
		# Ki·ªÉm tra quy·ªÅn
		if frappe.session.user != caller_id:
			frappe.throw(_("B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o cu·ªôc g·ªçi n√†y"))
		
		# T·∫°o session ID duy nh·∫•t
		session_id = f"call_{caller_id}_{callee_id}_{int(time.time())}"
		
		# T·∫°o channel_id cho DM
		channel_id = f"{caller_id} _ {callee_id}" if caller_id < callee_id else f"{callee_id} _ {caller_id}"
		
		# L∆∞u th√¥ng tin cu·ªôc g·ªçi v√†o database
		call_session = frappe.get_doc({
			"doctype": "Raven Call Session",
			"session_id": session_id,
			"caller_id": caller_id,
			"callee_id": callee_id,
			"call_type": call_type,
			"status": "initiated",
			"channel_id": channel_id
		})
		call_session.insert(ignore_permissions=True)
		
		print(f"üìû [API] Creating call session: {caller_id} -> {callee_id}, type: {call_type}")
		
		# L·∫•y t√™n ng∆∞·ªùi g·ªçi
		caller_name = frappe.get_cached_value("Raven User", caller_id, "full_name")
		if not caller_name:
			caller_name = frappe.get_cached_value("Raven User", caller_id, "first_name")
		if not caller_name:
			caller_name = caller_id
		
		# G·ª≠i th√¥ng b√°o realtime cho ng∆∞·ªùi nh·∫≠n
		frappe.publish_realtime(
			event="incoming_call",
			message={
				"session_id": session_id,
				"caller_id": caller_id,
				"callee_id": callee_id,
				"call_type": call_type,
				"caller_name": caller_name
			},
			user=callee_id
		)
		
		return {
			"session_id": session_id,
			"caller_id": caller_id,
			"callee_id": callee_id,
			"call_type": call_type
		}
		
	except Exception as e:
		frappe.log_error(f"L·ªói khi t·∫°o call session: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ t·∫°o session cu·ªôc g·ªçi"))

@frappe.whitelist(methods=["POST"])
def update_call_status(session_id, status, end_time=None):
	"""
	C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc g·ªçi
	"""
	try:
		call_session = get_call_session_safely(session_id)
		call_session.status = status
		
		if end_time and status in ["ended", "missed", "rejected"]:
			call_session.end_time = end_time
			if call_session.start_time:
				from datetime import datetime
				start = datetime.fromisoformat(str(call_session.start_time))
				end = datetime.fromisoformat(end_time)
				call_session.duration = int((end - start).total_seconds())
		
		call_session.save(ignore_permissions=True)
		
		# Th√¥ng b√°o realtime cho c·∫£ hai ng∆∞·ªùi d√πng
		users = [call_session.caller_id, call_session.callee_id]
		print(f"üì° [API] Sending realtime to users: {users}, status: {status}")
		
		frappe.publish_realtime(
			event="call_status_update",
			message={
				"session_id": session_id,
				"status": status
			},
			user=users
		)
		
		print(f"üì° [API] Realtime sent successfully")
		
		return {"success": True}
		
	except Exception as e:
		frappe.log_error(f"L·ªói khi c·∫≠p nh·∫≠t call status: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc g·ªçi"))

@frappe.whitelist(methods=["POST"])
def answer_call(session_id):
	"""
	Tr·∫£ l·ªùi cu·ªôc g·ªçi
	"""
	try:
		call_session = get_call_session_safely(session_id)
		
		# Ki·ªÉm tra quy·ªÅn
		if frappe.session.user != call_session.callee_id:
			frappe.throw(_("B·∫°n kh√¥ng c√≥ quy·ªÅn tr·∫£ l·ªùi cu·ªôc g·ªçi n√†y"))
		
		call_session.status = "answered"
		call_session.save(ignore_permissions=True)
		
		# Th√¥ng b√°o cho ng∆∞·ªùi g·ªçi
		frappe.publish_realtime(
			event="call_answered",
			message={
				"session_id": session_id,
				"callee_id": call_session.callee_id
			},
			user=call_session.caller_id
		)
		
		return {"success": True}
		
	except Exception as e:
		frappe.log_error(f"L·ªói khi tr·∫£ l·ªùi cu·ªôc g·ªçi: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ tr·∫£ l·ªùi cu·ªôc g·ªçi"))

@frappe.whitelist(methods=["POST"])
def reject_call(session_id):
	"""
	T·ª´ ch·ªëi cu·ªôc g·ªçi
	"""
	try:
		call_session = get_call_session_safely(session_id)
		
		# Ki·ªÉm tra quy·ªÅn
		if frappe.session.user != call_session.callee_id:
			frappe.throw(_("B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi cu·ªôc g·ªçi n√†y"))
		
		call_session.status = "rejected"
		call_session.save(ignore_permissions=True)
		
		# Th√¥ng b√°o cho ng∆∞·ªùi g·ªçi
		frappe.publish_realtime(
			event="call_rejected",
			message={
				"session_id": session_id,
				"callee_id": call_session.callee_id
			},
			user=call_session.caller_id
		)
		
		return {"success": True}
		
	except Exception as e:
		frappe.log_error(f"L·ªói khi t·ª´ ch·ªëi cu·ªôc g·ªçi: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ t·ª´ ch·ªëi cu·ªôc g·ªçi")) 

@frappe.whitelist(methods=["POST"])
def send_video_upgrade_request(session_id, from_user, to_user):
	"""
	G·ª≠i y√™u c·∫ßu n√¢ng c·∫•p l√™n video call
	"""
	try:
		# Ki·ªÉm tra quy·ªÅn
		if frappe.session.user != from_user:
			frappe.throw(_("B·∫°n kh√¥ng c√≥ quy·ªÅn g·ª≠i y√™u c·∫ßu n√†y"))
		
		print(f"üìπ [API] Processing video upgrade request from {from_user} to {to_user}, session: {session_id}")
		
		# Ki·ªÉm tra session t·ªìn t·∫°i (cho ph√©p c·∫£ fallback session)
		call_session = None
		try:
			call_session = frappe.get_doc("Raven Call Session", {"session_id": session_id})
			print(f"üìπ [API] Found call session with status: {call_session.status}")
		except frappe.DoesNotExistError:
			print(f"üìπ [API] Call session not found in DB, proceeding with realtime only")
		
		# Relax validation - allow if session not found or any status
		if call_session and call_session.status not in ["answered", "connected", "initiated"]:
			print(f"üìπ [API] Warning: Call session status is {call_session.status}, but proceeding anyway")
		
		print(f"üìπ [API] Sending video upgrade request from {from_user} to {to_user}")
		
		# L·∫•y t√™n ng∆∞·ªùi g·ª≠i y√™u c·∫ßu
		from_user_name = frappe.get_cached_value("Raven User", from_user, "full_name")
		if not from_user_name:
			from_user_name = frappe.get_cached_value("Raven User", from_user, "first_name")
		if not from_user_name:
			from_user_name = from_user
		
		print(f"üìπ [API] Sending realtime event to user: {to_user}")
		
		# G·ª≠i th√¥ng b√°o realtime cho ng∆∞·ªùi nh·∫≠n
		frappe.publish_realtime(
			event="video_upgrade_request",
			message={
				"session_id": session_id,
				"from_user": from_user,
				"to_user": to_user,
				"from_user_name": from_user_name,
				"timestamp": int(time.time())
			},
			user=to_user
		)
		
		# Also send to all sessions of the user for better delivery
		frappe.publish_realtime(
			event="video_upgrade_request",
			message={
				"session_id": session_id,
				"from_user": from_user,
				"to_user": to_user,
				"from_user_name": from_user_name,
				"timestamp": int(time.time())
			},
			room=f"user_{to_user}"
		)
		
		print(f"üìπ [API] Video upgrade request sent successfully")
		
		return {"success": True}
		
	except Exception as e:
		print(f"üìπ [API] Error in send_video_upgrade_request: {str(e)}")
		frappe.log_error(f"L·ªói khi g·ª≠i video upgrade request: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu n√¢ng c·∫•p video"))

@frappe.whitelist(methods=["POST"])
def respond_video_upgrade(session_id, accepted):
	"""
	Ph·∫£n h·ªìi y√™u c·∫ßu n√¢ng c·∫•p video call
	"""
	try:
		print(f"üìπ [API] Processing video upgrade response for session: {session_id}, accepted: {accepted}")
		
		# Ki·ªÉm tra session t·ªìn t·∫°i (cho ph√©p fallback sessions)
		call_session = None
		target_user = None
		current_user = frappe.session.user
		
		try:
			call_session = frappe.get_doc("Raven Call Session", {"session_id": session_id})
			print(f"üìπ [API] Found call session: {call_session.caller_id} -> {call_session.callee_id}")
			
			# X√°c ƒë·ªãnh ng∆∞·ªùi g·ª≠i ph·∫£n h·ªìi (callee ho·∫∑c caller)
			if current_user == call_session.caller_id:
				target_user = call_session.callee_id
			elif current_user == call_session.callee_id:
				target_user = call_session.caller_id
			else:
				frappe.throw(_("B·∫°n kh√¥ng c√≥ quy·ªÅn ph·∫£n h·ªìi y√™u c·∫ßu n√†y"))
				
		except frappe.DoesNotExistError:
			print(f"üìπ [API] Call session not found in DB, proceeding with realtime only")
			# For fallback sessions, extract target user from session_id pattern
			if "_" in session_id:
				parts = session_id.split("_")
				if len(parts) >= 3:
					user1, user2 = parts[1], parts[2]
					target_user = user2 if current_user == user1 else user1
					print(f"üìπ [API] Extracted target user from session ID: {target_user}")
		
		if not target_user:
			frappe.throw(_("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi nh·∫≠n ph·∫£n h·ªìi"))
		
		accepted = str(accepted).lower() == 'true'
		
		print(f"üìπ [API] Video upgrade response: {accepted} from {current_user} to {target_user}")
		
		# N·∫øu ƒë∆∞·ª£c ch·∫•p nh·∫≠n, c·∫≠p nh·∫≠t call type th√†nh video (n·∫øu c√≥ session)
		if accepted and call_session:
			call_session.call_type = "video"
			call_session.save(ignore_permissions=True)
			print(f"üìπ [API] Updated call session type to video")
		
		# G·ª≠i th√¥ng b√°o realtime cho ng∆∞·ªùi y√™u c·∫ßu
		frappe.publish_realtime(
			event="video_upgrade_response",
			message={
				"session_id": session_id,
				"accepted": accepted,
				"from_user": current_user
			},
			user=target_user
		)
		
		# Also send to user room for better delivery
		frappe.publish_realtime(
			event="video_upgrade_response",
			message={
				"session_id": session_id,
				"accepted": accepted,
				"from_user": current_user
			},
			room=f"user_{target_user}"
		)
		
		print(f"üìπ [API] Video upgrade response sent successfully")
		
		return {"success": True, "accepted": accepted}
		
	except Exception as e:
		print(f"üìπ [API] Error in respond_video_upgrade: {str(e)}")
		frappe.log_error(f"L·ªói khi ph·∫£n h·ªìi video upgrade: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ ph·∫£n h·ªìi y√™u c·∫ßu n√¢ng c·∫•p video"))

@frappe.whitelist(methods=["GET"])
def stringee_answer_url():
	"""
	Answer URL endpoint cho Stringee
	Tr·∫£ v·ªÅ JSON config cho Stringee khi c√≥ cu·ªôc g·ªçi ƒë·∫øn
	"""
	try:
		# L·∫•y query parameters
		record = frappe.form_dict.get("record", "false")
		app_to_phone = frappe.form_dict.get("appToPhone", "false")
		
		# Tr·∫£ v·ªÅ JSON config theo format Stringee y√™u c·∫ßu
		response = [{
			"action": "connect",
			"from": {
				"type": "internal", 
				"number": "",
				"alias": ""
			},
			"to": {
				"type": "internal",
				"number": "", 
				"alias": ""
			},
			"customData": "",
			"timeout": 60,
			"maxConnectTime": 0,
			"peerToPeerCall": True
		}]
		
		return response
		
	except Exception as e:
		frappe.log_error(f"L·ªói trong stringee answer URL: {str(e)}")
		return [{
			"action": "connect",
			"from": {"type": "internal", "number": "", "alias": ""},
			"to": {"type": "internal", "number": "", "alias": ""},
			"customData": "",
			"timeout": 60,
			"maxConnectTime": 0,
			"peerToPeerCall": True
		}] 

@frappe.whitelist(methods=["POST"])
def check_user_busy_status(user_id):
	"""
	Ki·ªÉm tra xem user c√≥ ƒëang trong cu·ªôc g·ªçi kh√¥ng
	"""
	try:
		# Ki·ªÉm tra quy·ªÅn - ch·ªâ ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ th·ªÉ check
		current_user = frappe.session.user
		
		print(f"üìû [API] Checking busy status for user: {user_id} (requested by: {current_user})")
		
		# T√¨m c√°c cu·ªôc g·ªçi ƒëang active c·ªßa user
		active_calls = frappe.db.sql("""
			SELECT session_id, caller_id, callee_id, status, call_type
			FROM `tabRaven Call Session`
			WHERE (caller_id = %(user_id)s OR callee_id = %(user_id)s)
			AND status IN ('initiated', 'answered', 'connected')
			AND TIMESTAMPDIFF(MINUTE, creation, NOW()) < 30
			ORDER BY creation DESC
		""", {"user_id": user_id}, as_dict=True)
		
		print(f"üìû [API] Found {len(active_calls)} active call sessions for user {user_id}")
		
		is_busy = len(active_calls) > 0
		
		if is_busy:
			# L·∫•y th√¥ng tin cu·ªôc g·ªçi g·∫ßn nh·∫•t
			latest_call = active_calls[0]
			print(f"üìû [API] User {user_id} is BUSY with call: {latest_call}")
			
			return {
				"is_busy": True,
				"current_call": {
					"session_id": latest_call.session_id,
					"status": latest_call.status,
					"call_type": latest_call.call_type,
					"with_user": latest_call.caller_id if latest_call.callee_id == user_id else latest_call.callee_id
				}
			}
		else:
			print(f"üìû [API] User {user_id} is AVAILABLE")
			return {
				"is_busy": False,
				"current_call": None
			}
			
	except Exception as e:
		print(f"üìû [API] Error checking busy status: {str(e)}")
		frappe.log_error(f"L·ªói khi ki·ªÉm tra busy status: {str(e)}")
		# Tr·∫£ v·ªÅ available n·∫øu c√≥ l·ªói ƒë·ªÉ kh√¥ng block cu·ªôc g·ªçi
		return {
			"is_busy": False,
			"current_call": None,
			"error": str(e)
		}

@frappe.whitelist(methods=["POST"])
def send_video_status(session_id, from_user, to_user, video_enabled):
	"""
	G·ª≠i tr·∫°ng th√°i video (b·∫≠t/t·∫Øt) cho ng∆∞·ªùi d√πng kh√°c
	"""
	try:
		# Ki·ªÉm tra quy·ªÅn
		current_user = frappe.session.user
		if current_user != from_user:
			frappe.throw(_("B·∫°n kh√¥ng c√≥ quy·ªÅn g·ª≠i tr·∫°ng th√°i video n√†y"))
		
		# Parse video_enabled if it's a string
		if isinstance(video_enabled, str):
			video_enabled = video_enabled.lower() == 'true'
		
		print(f"üìπ [API] Sending video status from {from_user} to {to_user}: {video_enabled}")
		
		# G·ª≠i th√¥ng b√°o realtime cho ng∆∞·ªùi nh·∫≠n
		frappe.publish_realtime(
			event="video_status_update",
			message={
				"session_id": session_id,
				"from_user": from_user,
				"video_enabled": video_enabled
			},
			user=to_user
		)
		
		# Also send to user room for better delivery
		frappe.publish_realtime(
			event="video_status_update",
			message={
				"session_id": session_id,
				"from_user": from_user,
				"video_enabled": video_enabled
			},
			room=f"user_{to_user}"
		)
		
		print(f"üìπ [API] Video status sent successfully")
		
		return {"success": True, "video_enabled": video_enabled}
		
	except Exception as e:
		print(f"üìπ [API] Error sending video status: {str(e)}")
		frappe.log_error(f"L·ªói khi g·ª≠i video status: {str(e)}")
		frappe.throw(_("Kh√¥ng th·ªÉ g·ª≠i tr·∫°ng th√°i video"))