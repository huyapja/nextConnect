import { ErrorCallout } from '@/components/common/Callouts/ErrorCallouts'
import { Stack } from '@/components/layout/Stack'
import { Badge, Button, Flex, Heading, IconButton, Link, Text } from '@radix-ui/themes'
import clsx from 'clsx'
import { FrappeConfig, FrappeContext, useFrappeEventListener } from 'frappe-react-sdk'
import { useContext, useEffect, useState } from 'react'
import { LuRefreshCcw } from 'react-icons/lu'
import { TbReportAnalytics } from 'react-icons/tb'

const SocketIOHealth = () => {
  const { socket } = useContext(FrappeContext) as FrappeConfig

  const [loading, setLoading] = useState<boolean>(true)
  const [socketPingTest, setSocketPingTest] = useState('Fail')
  const [socketTransportMode, setSocketTransportMode] = useState<string | undefined>('')
  
  // Th√™m state ƒë·ªÉ test realtime events
  const [realtimeEventTest, setRealtimeEventTest] = useState<string>('Ch∆∞a ki·ªÉm tra')
  const [lastEventReceived, setLastEventReceived] = useState<string>('')

  useFrappeEventListener('pong', () => {
    setSocketPingTest('Pass')
    setLoading(false)
    setSocketTransportMode(socket?.io.engine.transport.name)
  })

  // Test event listeners cho message events
  useFrappeEventListener('message_created', (event) => {
    setRealtimeEventTest('Ho·∫°t ƒë·ªông')
    setLastEventReceived(`message_created t·ª´ channel: ${event.channel_id} l√∫c ${new Date().toLocaleTimeString()}`)
    console.log('üîî SocketIOHealth: message_created event received:', event)
  })

  useFrappeEventListener('message_edited', (event) => {
    setRealtimeEventTest('Ho·∫°t ƒë·ªông')
    setLastEventReceived(`message_edited t·ª´ channel: ${event.channel_id} l√∫c ${new Date().toLocaleTimeString()}`)
    console.log('üîî SocketIOHealth: message_edited event received:', event)
  })

  useFrappeEventListener('message_deleted', (event) => {
    setRealtimeEventTest('Ho·∫°t ƒë·ªông')
    setLastEventReceived(`message_deleted t·ª´ channel: ${event.channel_id} l√∫c ${new Date().toLocaleTimeString()}`)
    console.log('üîî SocketIOHealth: message_deleted event received:', event)
  })

  const onPingCheck = () => {
    setLoading(true)
    socket?.emit('ping')
    setTimeout(() => {
      setLoading(false)
      setSocketTransportMode((s) => {
        if (!s) {
          return ''
        }
        return s
      })
    }, 5000)
  }

  const resetRealtimeTest = () => {
    setRealtimeEventTest('Ch∆∞a ki·ªÉm tra')
    setLastEventReceived('')
  }

  useEffect(() => {
    setTimeout(onPingCheck, 5000)
  }, [])

  return (
    <Stack>
      <Heading as='h3' size='3' className='not-cal font-semibold'>
        Ki·ªÉm Tra K·∫øt N·ªëi Th·ªùi Gian Th·ª±c
      </Heading>
      <Text size='2' color='gray'>
        N·∫øu tin nh·∫Øn tr√™n Raven kh√¥ng hi·ªÉn th·ªã theo th·ªùi gian th·ª±c, b·∫°n c√≥ th·ªÉ ki·ªÉm tra k·∫øt n·ªëi m·∫°ng t·∫°i ƒë√¢y.
      </Text>
      {!loading && socketPingTest === 'Fail' && (
        <ErrorCallout message='K·∫øt n·ªëi th·ªùi gian th·ª±c ƒëang kh√¥ng ho·∫°t ƒë·ªông. Tin nh·∫Øn s·∫Ω kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông.' />
      )}
      
      {/* Socket Ping Test */}
      <Flex gap='3' align='center' pt='2'>
        <Text size='2' color='gray' as='span'>
          Ki·ªÉm tra Ping th·ªùi gian th·ª±c:
        </Text>
        <Flex align='center' gap='2'>
          <Badge color={loading ? 'gray' : socketPingTest === 'Pass' ? 'green' : 'red'}>
            {loading ? 'ƒêang t·∫£i...' : socketPingTest}
          </Badge>
          {!loading && (
            <IconButton
              title='G·ª≠i ping'
              aria-label='g·ª≠i ping'
              color='gray'
              size='1'
              variant='ghost'
              onClick={onPingCheck}
            >
              <LuRefreshCcw className={clsx(loading ? 'animate-spin' : null)} size={12} />
            </IconButton>
          )}
        </Flex>
      </Flex>

      {/* Realtime Message Events Test */}
      <Flex gap='3' align='center' pt='2'>
        <Text size='2' color='gray' as='span'>
          Ki·ªÉm tra Events Tin nh·∫Øn:
        </Text>
        <Flex align='center' gap='2'>
          <Badge 
            color={
              realtimeEventTest === 'Ho·∫°t ƒë·ªông' ? 'green' : 
              realtimeEventTest === 'Ch∆∞a ki·ªÉm tra' ? 'gray' : 'red'
            }
          >
            {realtimeEventTest}
          </Badge>
          <Button
            size='1'
            variant='soft'
            onClick={resetRealtimeTest}
          >
            Reset
          </Button>
        </Flex>
      </Flex>

      {/* Last Event Info */}
      {lastEventReceived && (
        <Flex gap='2' align='center'>
          <Text size='2' color='gray' as='span'>
            Event cu·ªëi:
          </Text>
          <Text size='2' color='blue' className='font-mono'>
            {lastEventReceived}
          </Text>
        </Flex>
      )}

      {socketTransportMode && (
        <Flex gap='2' align='center'>
          <Text size='2' color='gray' as='span'>
            Giao Th·ª©c K·∫øt N·ªëi SocketIO:
          </Text>
          <Badge color='orange'>{socketTransportMode}</Badge>
        </Flex>
      )}

      <div className='pt-2'>
        <Text size='2' color='gray' className='block mb-2'>
          üí° <strong>H∆∞·ªõng d·∫´n test:</strong> G·ª≠i tin nh·∫Øn trong channel kh√°c ho·∫∑c edit/delete tin nh·∫Øn ƒë·ªÉ xem events
        </Text>
        <Link
          underline='always'
          size='2'
          target='_blank'
          title='B√°o c√°o t√¨nh tr·∫°ng h·ªá th·ªëng'
          href='/app/system-health-report'
        >
          <TbReportAnalytics size='16' className='-mb-0.5 pr-1' />
          Xem B√°o C√°o T√¨nh Tr·∫°ng H·ªá Th·ªëng
        </Link>
      </div>
    </Stack>
  )
}

export default SocketIOHealth
