/**
 * Firebase Debug Console Utility
 * S·ª≠ d·ª•ng: M·ªü F12 Console v√† g·ªçi c√°c function n√†y ƒë·ªÉ debug Firebase
 * 
 * Commands:
 * - firebaseDebug.checkAll() - Ki·ªÉm tra to√†n b·ªô
 * - firebaseDebug.checkConfig() - Ki·ªÉm tra config
 * - firebaseDebug.checkToken() - Ki·ªÉm tra token
 * - firebaseDebug.checkPermission() - Ki·ªÉm tra permission
 * - firebaseDebug.testNotification() - Test g·ª≠i notification
 */

window.firebaseDebug = {
  
  /**
   * Ki·ªÉm tra to√†n b·ªô Firebase setup
   */
  async checkAll() {
    console.log('üî• === FIREBASE DEBUG - KI·ªÇM TRA TO√ÄN B·ªò ===');
    
    try {
      // 1. Ki·ªÉm tra c·∫•u h√¨nh
      await this.checkConfig();
      console.log('');
      
      // 2. Ki·ªÉm tra permission
      await this.checkPermission();
      console.log('');
      
      // 3. Ki·ªÉm tra token
      await this.checkToken();
      console.log('');
      
      // 4. Ki·ªÉm tra database
      await this.checkDatabase();
      console.log('');
      
      // 5. Test notification
      await this.testNotification();
      
      console.log('‚úÖ FIREBASE DEBUG HO√ÄN TH√ÄNH');
      
    } catch (error) {
      console.error('‚ùå L·ªói trong qu√° tr√¨nh debug:', error);
    }
  },

  /**
   * Ki·ªÉm tra Firebase configuration
   */
  async checkConfig() {
    console.log('üîß === KI·ªÇM TRA FIREBASE CONFIG ===');
    
    try {
      // Ki·ªÉm tra Firebase service
      const service = window.firebaseNotificationService;
      console.log('Firebase Service:', service ? '‚úÖ Available' : '‚ùå Not found');
      
      if (service) {
        console.log('Service initialized:', service.isInitialized() ? '‚úÖ Yes' : '‚ùå No');
      }
      
      // Ki·ªÉm tra Firebase messaging object
      const messaging = window.firebaseMessaging;
      console.log('Firebase Messaging:', messaging ? '‚úÖ Available' : '‚ùå Not found');
      
      // Ki·ªÉm tra Firebase v9 objects
      const firebaseV9 = window.firebaseV9;
      console.log('Firebase V9 Objects:', firebaseV9 ? '‚úÖ Available' : '‚ùå Not found');
      
      if (firebaseV9) {
        console.log('- Messaging:', firebaseV9.messaging ? '‚úÖ' : '‚ùå');
        console.log('- getToken:', firebaseV9.getToken ? '‚úÖ' : '‚ùå');
        console.log('- onMessage:', firebaseV9.onMessage ? '‚úÖ' : '‚ùå');
      }
      
      // L·∫•y config t·ª´ server
      const response = await fetch('/api/method/raven.api.firebase_notification.get_firebase_config');
      const configData = await response.json();
      
      if (configData.message) {
        const { firebaseConfig, vapidKey } = configData.message;
        console.log('üìã Firebase Config t·ª´ server:');
        console.log('- API Key:', firebaseConfig.apiKey ? '‚úÖ C√≥' : '‚ùå Thi·∫øu');
        console.log('- Project ID:', firebaseConfig.projectId ? '‚úÖ' + firebaseConfig.projectId : '‚ùå Thi·∫øu');
        console.log('- Messaging Sender ID:', firebaseConfig.messagingSenderId ? '‚úÖ' + firebaseConfig.messagingSenderId : '‚ùå Thi·∫øu');
        console.log('- App ID:', firebaseConfig.appId ? '‚úÖ C√≥' : '‚ùå Thi·∫øu');
        console.log('- VAPID Key:', vapidKey ? '‚úÖ C√≥' : '‚ùå Thi·∫øu');
        
        if (vapidKey) {
          console.log('VAPID Key preview:', vapidKey.substring(0, 20) + '...');
        }
      } else {
        console.error('‚ùå Kh√¥ng th·ªÉ l·∫•y Firebase config t·ª´ server');
      }
      
    } catch (error) {
      console.error('‚ùå L·ªói ki·ªÉm tra config:', error);
    }
  },

  /**
   * Ki·ªÉm tra notification permission
   */
  async checkPermission() {
    console.log('üîî === KI·ªÇM TRA NOTIFICATION PERMISSION ===');
    
    try {
      // Ki·ªÉm tra browser support
      console.log('Browser support Notification:', 'Notification' in window ? '‚úÖ Yes' : '‚ùå No');
      console.log('Browser support ServiceWorker:', 'serviceWorker' in navigator ? '‚úÖ Yes' : '‚ùå No');
      
      // Ki·ªÉm tra permission hi·ªán t·∫°i
      const permission = Notification.permission;
      console.log('Current permission:', permission);
      
      if (permission === 'granted') {
        console.log('‚úÖ Permission ƒë√£ ƒë∆∞·ª£c c·∫•p');
      } else if (permission === 'denied') {
        console.log('‚ùå Permission b·ªã t·ª´ ch·ªëi');
      } else {
        console.log('‚ö†Ô∏è Permission ch∆∞a ƒë∆∞·ª£c h·ªèi');
        
        // Th·ª≠ request permission
        const newPermission = await Notification.requestPermission();
        console.log('Permission sau khi request:', newPermission);
      }
      
      // Ki·ªÉm tra service worker
      if ('serviceWorker' in navigator) {
        const registrations = await navigator.serviceWorker.getRegistrations();
        console.log('Service Worker registrations:', registrations.length);
        
        registrations.forEach((reg, index) => {
          console.log(`SW ${index + 1}:`, reg.scope);
          console.log('- Active:', reg.active ? '‚úÖ' : '‚ùå');
          console.log('- Installing:', reg.installing ? '‚ö†Ô∏è' : '‚ùå');
          console.log('- Waiting:', reg.waiting ? '‚ö†Ô∏è' : '‚ùå');
        });
      }
      
    } catch (error) {
      console.error('‚ùå L·ªói ki·ªÉm tra permission:', error);
    }
  },

  /**
   * Ki·ªÉm tra Firebase token
   */
  async checkToken() {
    console.log('üé´ === KI·ªÇM TRA FIREBASE TOKEN ===');
    
    try {
      const service = window.firebaseNotificationService;
      
      if (!service) {
        console.error('‚ùå Firebase service kh√¥ng available');
        return;
      }
      
      // L·∫•y token t·ª´ service
      const currentToken = service.getToken();
      console.log('Current token t·ª´ service:', currentToken ? '‚úÖ C√≥' : '‚ùå Kh√¥ng c√≥');
      
      if (currentToken) {
        console.log('Token preview:', currentToken.substring(0, 20) + '...' + currentToken.substring(-10));
        console.log('Token length:', currentToken.length);
      }
      
      // Th·ª≠ refresh token
      console.log('üîÑ ƒêang th·ª≠ refresh token...');
      await service.refreshToken();
      
      const newToken = service.getToken();
      console.log('Token sau refresh:', newToken ? '‚úÖ C√≥' : '‚ùå Kh√¥ng c√≥');
      
      if (newToken && newToken !== currentToken) {
        console.log('‚úÖ Token ƒë√£ ƒë∆∞·ª£c refresh');
        console.log('New token preview:', newToken.substring(0, 20) + '...' + newToken.substring(-10));
      } else if (newToken === currentToken) {
        console.log('‚ÑπÔ∏è Token kh√¥ng thay ƒë·ªïi (v·∫´n h·ª£p l·ªá)');
      }
      
    } catch (error) {
      console.error('‚ùå L·ªói ki·ªÉm tra token:', error);
    }
  },

  /**
   * Ki·ªÉm tra database c√≥ l∆∞u token kh√¥ng
   */
  async checkDatabase() {
    console.log('üíæ === KI·ªÇM TRA DATABASE TOKENS ===');
    
    try {
      const response = await fetch('/api/method/raven.api.firebase_notification.get_user_firebase_tokens');
      const result = await response.json();
      
      if (result.message && result.message.success) {
        const tokens = result.message.tokens;
        console.log('S·ªë l∆∞·ª£ng tokens trong database:', tokens.length);
        
        tokens.forEach((token, index) => {
          console.log(`Token ${index + 1}:`);
          console.log('- Environment:', token.environment);
          console.log('- Device info:', token.device_information || 'N/A');
          console.log('- Token preview:', token.firebase_token.substring(0, 20) + '...');
        });
        
        if (tokens.length === 0) {
          console.log('‚ö†Ô∏è Kh√¥ng c√≥ token n√†o trong database');
        }
      } else {
        console.error('‚ùå Kh√¥ng th·ªÉ l·∫•y tokens t·ª´ database:', result);
      }
      
    } catch (error) {
      console.error('‚ùå L·ªói ki·ªÉm tra database:', error);
    }
  },

  /**
   * Test g·ª≠i notification
   */
  async testNotification() {
    console.log('üì® === TEST G·ª¨I NOTIFICATION ===');
    
    try {
      const response = await fetch('/api/method/raven.api.firebase_notification.send_test_notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Frappe-CSRF-Token': window.frappe?.csrf_token || ''
        }
      });
      
      const result = await response.json();
      
      if (result.message && result.message.success) {
        console.log('‚úÖ Test notification ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng');
        console.log('Ki·ªÉm tra thi·∫øt b·ªã c·ªßa b·∫°n xem c√≥ nh·∫≠n ƒë∆∞·ª£c notification kh√¥ng');
      } else {
        console.error('‚ùå Kh√¥ng th·ªÉ g·ª≠i test notification:', result.message?.message || result);
      }
      
    } catch (error) {
      console.error('‚ùå L·ªói g·ª≠i test notification:', error);
    }
  },

  /**
   * Show help
   */
  help() {
    console.log(`
üî• === FIREBASE DEBUG CONSOLE HELP ===

C√°c l·ªánh available:

1. firebaseDebug.checkAll()
   - Ki·ªÉm tra to√†n b·ªô Firebase setup

2. firebaseDebug.checkConfig()
   - Ki·ªÉm tra Firebase configuration

3. firebaseDebug.checkPermission()
   - Ki·ªÉm tra notification permission

4. firebaseDebug.checkToken()
   - Ki·ªÉm tra Firebase token

5. firebaseDebug.checkDatabase()
   - Ki·ªÉm tra tokens trong database

6. firebaseDebug.testNotification()
   - Test g·ª≠i notification

7. firebaseDebug.help()
   - Hi·ªÉn th·ªã help n√†y

=== C√ÅCH S·ª¨ D·ª§NG ===
1. M·ªü Developer Tools (F12)
2. Chuy·ªÉn sang tab Console
3. G√µ: firebaseDebug.checkAll()
4. Ki·ªÉm tra k·∫øt qu·∫£

Happy debugging! üöÄ
    `);
  }
};

// Auto-run help when loaded
console.log('üî• Firebase Debug Console loaded!');
console.log('G√µ firebaseDebug.help() ƒë·ªÉ xem h∆∞·ªõng d·∫´n');
console.log('Ho·∫∑c firebaseDebug.checkAll() ƒë·ªÉ ki·ªÉm tra to√†n b·ªô'); 